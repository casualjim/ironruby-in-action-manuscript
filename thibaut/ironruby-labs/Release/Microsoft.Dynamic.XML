<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Dynamic</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Scripting.ArgBuilder">
            <summary>
            ArgBuilder provides an argument value used by the MethodBinder.  One ArgBuilder exists for each
            physical parameter defined on a method.  
            
            Contrast this with ParameterWrapper which represents the logical argument passed to the method.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ArgBuilder.Marshal(Microsoft.Linq.Expressions.Expression)">
            <summary>
            Provides the Expression which provides the value to be passed to the argument.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ArgBuilder.MarshalToRef(Microsoft.Linq.Expressions.Expression)">
            <summary>
            Provides the Expression which provides the value to be passed to the argument.
            This method is called when result is intended to be used ByRef.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ArgBuilder.UnmarshalFromRef(Microsoft.Linq.Expressions.Expression)">
            <summary>
            Provides an Expression which will update the provided value after a call to the method.
            May return null if no update is required.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.SimpleArgBuilder">
            <summary>
            SimpleArgBuilder produces the value produced by the user as the argument value.  It
            also tracks information about the original parameter and is used to create extended
            methods for params arrays and param dictionary functions.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.BoundDispEvent.op_AdditionAssignment(System.Object)">
            <summary>
            Adds a handler to an event.
            </summary>
            <param name="func">The handler to be added.</param>
            <returns>The original event with handler added.</returns>
        </member>
        <member name="M:Microsoft.Scripting.BoundDispEvent.InPlaceAdd(System.Object)">
            <summary>
            Adds a handler to an event.
            </summary>
            <param name="func">The handler to be added.</param>
            <returns>The original event with handler added.</returns>
        </member>
        <member name="M:Microsoft.Scripting.BoundDispEvent.InPlaceSubtract(System.Object)">
            <summary>
            Removes handler from the event.
            </summary>
            <param name="func">The handler to be removed.</param>
            <returns>The original event with handler removed.</returns>
        </member>
        <member name="T:Microsoft.Scripting.ComBinder">
            <summary>
            Provides helper methods to bind COM objects dynamically.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ComBinder.IsComObject(System.Object)">
            <summary>
            Determines if an object is a COM object.
            </summary>
            <param name="value">The object to test.</param>
            <returns>true if the object is a COM object, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComBinder.TryBindGetMember(Microsoft.Scripting.GetMemberBinder,Microsoft.Scripting.DynamicMetaObject,Microsoft.Scripting.DynamicMetaObject@,System.Boolean)">
            <summary>
            Tries to perform binding of the dynamic get member operation.
            </summary>
            <param name="binder">An instance of the <see cref="T:Microsoft.Scripting.GetMemberBinder"/> that represents the details of the dynamic operation.</param>
            <param name="instance">The target of the dynamic operation. </param>
            <param name="result">The new <see cref="T:Microsoft.Scripting.DynamicMetaObject"/> representing the result of the binding.</param>
            <param name="delayInvocation">true if member evaluation may be delayed.</param>
            <returns>true if operation was bound successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComBinder.TryBindGetMember(Microsoft.Scripting.GetMemberBinder,Microsoft.Scripting.DynamicMetaObject,Microsoft.Scripting.DynamicMetaObject@)">
            <summary>
            Tries to perform binding of the dynamic get member operation.
            </summary>
            <param name="binder">An instance of the <see cref="T:Microsoft.Scripting.GetMemberBinder"/> that represents the details of the dynamic operation.</param>
            <param name="instance">The target of the dynamic operation. </param>
            <param name="result">The new <see cref="T:Microsoft.Scripting.DynamicMetaObject"/> representing the result of the binding.</param>
            <returns>true if operation was bound successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComBinder.TryBindSetMember(Microsoft.Scripting.SetMemberBinder,Microsoft.Scripting.DynamicMetaObject,Microsoft.Scripting.DynamicMetaObject,Microsoft.Scripting.DynamicMetaObject@)">
            <summary>
            Tries to perform binding of the dynamic set member operation.
            </summary>
            <param name="binder">An instance of the <see cref="T:Microsoft.Scripting.SetMemberBinder"/> that represents the details of the dynamic operation.</param>
            <param name="instance">The target of the dynamic operation.</param>
            <param name="value">The <see cref="T:Microsoft.Scripting.DynamicMetaObject"/> representing the value for the set member operation.</param>
            <param name="result">The new <see cref="T:Microsoft.Scripting.DynamicMetaObject"/> representing the result of the binding.</param>
            <returns>true if operation was bound successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComBinder.TryBindInvoke(Microsoft.Scripting.InvokeBinder,Microsoft.Scripting.DynamicMetaObject,Microsoft.Scripting.DynamicMetaObject[],Microsoft.Scripting.DynamicMetaObject@)">
            <summary>
            Tries to perform binding of the dynamic invoke operation.
            </summary>    
            <param name="binder">An instance of the <see cref="T:Microsoft.Scripting.GetMemberBinder"/> that represents the details of the dynamic operation.</param>
            <param name="instance">The target of the dynamic operation. </param>
            <param name="args">An array of <see cref="T:Microsoft.Scripting.DynamicMetaObject"/> instances - arguments to the invoke member operation.</param>
            <param name="result">The new <see cref="T:Microsoft.Scripting.DynamicMetaObject"/> representing the result of the binding.</param>
            <returns>true if operation was bound successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComBinder.TryBindInvokeMember(Microsoft.Scripting.InvokeMemberBinder,Microsoft.Scripting.DynamicMetaObject,Microsoft.Scripting.DynamicMetaObject[],Microsoft.Scripting.DynamicMetaObject@)">
            <summary>
            Tries to perform binding of the dynamic invoke member operation.
            </summary>
            <param name="binder">An instance of the <see cref="T:Microsoft.Scripting.InvokeMemberBinder"/> that represents the details of the dynamic operation.</param>
            <param name="instance">The target of the dynamic operation. </param>
            <param name="args">An array of <see cref="T:Microsoft.Scripting.DynamicMetaObject"/> instances - arguments to the invoke member operation.</param>
            <param name="result">The new <see cref="T:Microsoft.Scripting.DynamicMetaObject"/> representing the result of the binding.</param>
            <returns>true if operation was bound successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComBinder.TryBindGetIndex(Microsoft.Scripting.GetIndexBinder,Microsoft.Scripting.DynamicMetaObject,Microsoft.Scripting.DynamicMetaObject[],Microsoft.Scripting.DynamicMetaObject@)">
            <summary>
            Tries to perform binding of the dynamic get index operation.
            </summary>
            <param name="binder">An instance of the <see cref="T:Microsoft.Scripting.GetMemberBinder"/> that represents the details of the dynamic operation.</param>
            <param name="instance">The target of the dynamic operation. </param>
            <param name="args">An array of <see cref="T:Microsoft.Scripting.DynamicMetaObject"/> instances - arguments to the invoke member operation.</param>
            <param name="result">The new <see cref="T:Microsoft.Scripting.DynamicMetaObject"/> representing the result of the binding.</param>
            <returns>true if operation was bound successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComBinder.TryBindSetIndex(Microsoft.Scripting.SetIndexBinder,Microsoft.Scripting.DynamicMetaObject,Microsoft.Scripting.DynamicMetaObject[],Microsoft.Scripting.DynamicMetaObject,Microsoft.Scripting.DynamicMetaObject@)">
            <summary>
            Tries to perform binding of the dynamic set index operation.
            </summary>
            <param name="binder">An instance of the <see cref="T:Microsoft.Scripting.GetMemberBinder"/> that represents the details of the dynamic operation.</param>
            <param name="instance">The target of the dynamic operation. </param>
            <param name="args">An array of <see cref="T:Microsoft.Scripting.DynamicMetaObject"/> instances - arguments to the invoke member operation.</param>
            <param name="value">The <see cref="T:Microsoft.Scripting.DynamicMetaObject"/> representing the value for the set index operation.</param>
            <param name="result">The new <see cref="T:Microsoft.Scripting.DynamicMetaObject"/> representing the result of the binding.</param>
            <returns>true if operation was bound successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComBinder.GetDynamicMemberNames(System.Object)">
            <summary>
            Gets the member names associated with the object.
            This function can operate only with objects for which <see cref="M:Microsoft.Scripting.ComBinder.IsComObject(System.Object)"/> returns true.
            </summary>
            <param name="value">The object for which member names are requested.</param>
            <returns>The collection of member names.</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComBinder.GetDynamicDataMembers(System.Object)">
            <summary>
            Gets the data-like members and associated data for an object.
            This function can operate only with objects for which <see cref="M:Microsoft.Scripting.ComBinder.IsComObject(System.Object)"/> returns true.
            </summary>
            <param name="value">The object for which data members are requested.</param>
            <returns>The collection of pairs that represent data member's names and their data.</returns>
        </member>
        <member name="T:Microsoft.Scripting.ComBinder.ComGetMemberAsInvokeBinder">
            <summary>
            Adaptor class that allows transforming GetMember into InvokeMember when member evaluation is forced.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ComEventSink">
            <summary>
            This class implements an event sink for a particular RCW.
            Unlike the implementation of events in TlbImp'd assemblies,
            we will create only one event sink per RCW (theoretically RCW might have
            several ComEventSink evenk sinks - but all these implement different source intefaces).
            Each ComEventSink contains a list of ComEventSinkMethod objects - which represent
            a single method on the source interface an a multicast delegate to redirect 
            the calls. Notice that we are chaining multicast delegates so that same 
            ComEventSinkMedhod can invoke multiple event handlers).
            
            ComEventSink implements an IDisposable pattern to Unadvise from the connection point.
            Typically, when RCW is finalized the corresponding Dispose will be triggered by 
            ComEventSinksContainer finalizer. Notice that lifetime of ComEventSinksContainer
            is bound to the lifetime of the RCW. 
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ComEventSink.ComEventSinkMethod">
            <summary>
            Contains a methods DISPID (in a string formatted of "[DISPID=N]"
            and a chained list of delegates to invoke
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ComEventSinkProxy">
            <summary>
            ComEventSinkProxy class is responsible for handling QIs for sourceIid 
            on instances of ComEventSink.
            
            Background: When a COM even sink advises to a connection point it is 
            supposed to hand over the dispinterface. Now, some hosts will trust
            the COM client to pass the correct pointer, but some will not.
            E.g. Excel's implementation of Connection Points will not cause a
            QI on the pointer that has been passed, however Word will QI the
            pointer to return the required interface.
            
            ComEventSink does not, strongly speaking, implements the interface 
            that it claims to implement - it is just "faking" it by using IReflect.
            Thus, Word's QIs on the pointer passed to ICP::Advise would fail. To
            prevent this we take advangate of RealProxy's ability of
            "dressing up" like other classes and hence successfully respond to QIs 
            for interfaces that it does not really support( it is OK to say 
            "I implement this interface" for event sinks only since the common 
            practice is to use IDistpach.Invoke when calling into event sinks). 
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ComEventSinksContainer">
            <summary>
            ComEventSinksContainer is just a regular list with a finalizer.
            This list is usually attached as a custom data for RCW object and 
            is finalized whenever RCW is finalized.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.IDispatchMethodIndices">
            <summary>
            Layout of the IDispatch vtable
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInvokeBinder.MakeIDispatchInvokeTarget">
            <summary>
            Create a stub for the target of the optimized lopop.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInvokeBinder.MakeArgumentExpressions">
            <summary>
            Gets expressions to access all the arguments. This includes the instance argument.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInvokeBinder.GetArgumentNames">
            <summary>
            Gets all of the argument names. The instance argument is not included
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ComObject">
            <summary>
            This is a helper class for runtime-callable-wrappers of COM instances. We create one instance of this type
            for every generic RCW instance.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.ComObject._rcw">
            <summary>
            The runtime-callable wrapper
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ComObject.ObjectToComObject(System.Object)">
            <summary>
            This is the factory method to get the ComObject corresponding to an RCW
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Scripting.ComRuntimeHelpers.GetITypeInfoFromIDispatch(Microsoft.Scripting.IDispatch,System.Boolean)">
            <summary>
            Look for typeinfo using IDispatch.GetTypeInfo
            </summary>
            <param name="dispatch"></param>
            <param name="throwIfMissingExpectedTypeInfo">
            Some COM objects just dont expose typeinfo. In these cases, this method will return null.
            Some COM objects do intend to expose typeinfo, but may not be able to do so if the type-library is not properly 
            registered. This will be considered as acceptable or as an error condition depending on throwIfMissingExpectedTypeInfo</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Scripting.ComRuntimeHelpers.CheckIfMissingTypeInfoIsExpected(System.Int32,System.Boolean)">
            <summary>
            This method should be called when typeinfo is not available for an object. The function
            will check if the typeinfo is expected to be missing. This can include error cases where
            the same error is guaranteed to happen all the time, on all machines, under all circumstances.
            In such cases, we just have to operate without the typeinfo.
            
            However, if accessing the typeinfo is failing in a transient way, we might want to throw
            an exception so that we will eagerly predictably indicate the problem.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.UnsafeMethods">
            <summary>
            This class contains methods that either cannot be expressed in C#, or which require writing unsafe code.
            Callers of these methods need to use them extremely carefully as incorrect use could cause GC-holes
            and other problems.
            </summary>
            
        </member>
        <member name="M:Microsoft.Scripting.UnsafeMethods.AssertByrefPointsToStack(System.IntPtr)">
            <summary>
            Ensure that "value" is a local variable in some caller's frame. So converting
            the byref to an IntPtr is a safe operation. Alternatively, we could also allow 
            allowed "value"  to be a pinned object.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.UnsafeMethods.IUnknownReleaseDelegate">
            <summary>
            We will emit an indirect call to an unmanaged function pointer from the vtable of the given interface pointer. 
            This approach can take only ~300 instructions on x86 compared with ~900 for Marshal.Release. We are relying on 
            the JIT-compiler to do pinvoke-stub-inlining and calling the pinvoke target directly.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.UnsafeMethods.IDispatchInvokeDelegate">
            <summary>
            We will emit an indirect call to an unmanaged function pointer from the vtable of the given IDispatch interface pointer. 
            It is not possible to express this in C#. Using an indirect pinvoke call allows us to do our own marshalling. 
            We can allocate the Variant arguments cheaply on the stack. We are relying on the JIT-compiler to do 
            pinvoke-stub-inlining and calling the pinvoke target directly.
            The alternative of calling via a managed interface declaration of IDispatch would have a performance
            penalty of going through a CLR stub that would have to re-push the arguments on the stack, etc.
            Marshal.GetDelegateForFunctionPointer could be used here, but its too expensive (~2000 instructions on x86).
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.DispCallable">
            <summary>
            This represents a bound dispmember on a IDispatch object.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Strings">
            <summary>
               Strongly-typed and parameterized string factory.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.UnexpectedVarEnum(System.Object)">
            <summary>
            A string like  "Unexpected VarEnum {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.DispBadParamCount(System.Object)">
            <summary>
            A string like  "Error while invoking {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.DispMemberNotFound(System.Object)">
            <summary>
            A string like  "Error while invoking {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.DispNoNamedArgs(System.Object)">
            <summary>
            A string like  "Error while invoking {0}. Named arguments are not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.DispOverflow(System.Object)">
            <summary>
            A string like  "Error while invoking {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.DispTypeMismatch(System.Object,System.Object)">
            <summary>
            A string like  "Could not convert argument {0} for call to {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.DispParamNotOptional(System.Object)">
            <summary>
            A string like  "Error while invoking {0}. A required parameter was omitted."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.GetIDsOfNamesInvalid(System.Object)">
            <summary>
            A string like  "IDispatch::GetIDsOfNames behaved unexpectedly for {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.CouldNotGetDispId(System.Object,System.Object)">
            <summary>
            A string like  "Could not get dispatch ID for {0} (error: {1})."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.AmbiguousConversion(System.Object,System.Object)">
            <summary>
            A string like  "There are valid conversions from {0} to {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.VariantGetAccessorNYI(System.Object)">
            <summary>
            A string like  "Variant.GetAccessor cannot handle {0}."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidArgumentValue">
            <summary>
            A string like  "Invalid argument value"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.ComObjectExpected">
            <summary>
            A string like  "COM object is expected."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CannotCall">
            <summary>
            A string like  "Cannot perform call."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.RemovingUnregisteredEvent">
            <summary>
            A string like  "Removing an event handler that is not registered."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.COMObjectDoesNotSupportEvents">
            <summary>
            A string like  "COM object does not support events."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.COMObjectDoesNotSupportSourceInterface">
            <summary>
            A string like  "COM object does not support specified source interface."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.RemovingUnregisteredHandler">
            <summary>
            A string like  "Removing not registered handler."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.SetComObjectDataFailed">
            <summary>
            A string like  "Marshal.SetComObjectData failed."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MethodShouldNotBeCalled">
            <summary>
            A string like  "This method exists only to keep the compiler happy."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CannotRetrieveTypeInformation">
            <summary>
            A string like  "ResolveComReference.CannotRetrieveTypeInformation."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.UnsupportedEnumType">
            <summary>
            A string like  "Attempting to wrap an unsupported enum type."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NamedArgsShouldFollowPositional">
            <summary>
            A string like  "Named arguments should follow positional ones when calling COM methods."
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Error">
            <summary>
               Strongly-typed and parameterized exception factory.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.RemovingUnregisteredEvent">
            <summary>
            InvalidOperationException with message like "Removing an event handler that is not registered."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.COMObjectDoesNotSupportEvents">
            <summary>
            ArgumentException with message like "COM object does not support events."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.COMObjectDoesNotSupportSourceInterface">
            <summary>
            ArgumentException with message like "COM object does not support specified source interface."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.RemovingUnregisteredHandler">
            <summary>
            InvalidOperationException with message like "Removing not registered handler."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.SetComObjectDataFailed">
            <summary>
            InvalidOperationException with message like "Marshal.SetComObjectData failed."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MethodShouldNotBeCalled">
            <summary>
            InvalidOperationException with message like "This method exists only to keep the compiler happy."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnexpectedVarEnum(System.Object)">
            <summary>
            InvalidOperationException with message like "Unexpected VarEnum {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.DispBadParamCount(System.Object)">
            <summary>
            System.Reflection.TargetParameterCountException with message like "Error while invoking {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.DispMemberNotFound(System.Object)">
            <summary>
            MissingMemberException with message like "Error while invoking {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.DispNoNamedArgs(System.Object)">
            <summary>
            ArgumentException with message like "Error while invoking {0}. Named arguments are not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.DispOverflow(System.Object)">
            <summary>
            OverflowException with message like "Error while invoking {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.DispTypeMismatch(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Could not convert argument {0} for call to {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.DispParamNotOptional(System.Object)">
            <summary>
            ArgumentException with message like "Error while invoking {0}. A required parameter was omitted."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CannotRetrieveTypeInformation">
            <summary>
            InvalidOperationException with message like "ResolveComReference.CannotRetrieveTypeInformation."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.GetIDsOfNamesInvalid(System.Object)">
            <summary>
            ArgumentException with message like "IDispatch::GetIDsOfNames behaved unexpectedly for {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnsupportedEnumType">
            <summary>
            InvalidOperationException with message like "Attempting to wrap an unsupported enum type."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NamedArgsShouldFollowPositional">
            <summary>
            InvalidOperationException with message like "Named arguments should follow positional ones when calling COM methods."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CouldNotGetDispId(System.Object,System.Object)">
            <summary>
            MissingMemberException with message like "Could not get dispatch ID for {0} (error: {1})."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.AmbiguousConversion(System.Object,System.Object)">
            <summary>
            System.Reflection.AmbiguousMatchException with message like "There are valid conversions from {0} to {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.VariantGetAccessorNYI(System.Object)">
            <summary>
            NotImplementedException with message like "Variant.GetAccessor cannot handle {0}."
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ExcepInfo">
            <summary>
            This is similar to ComTypes.EXCEPINFO, but lets us do our own custom marshaling
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.IDispatchComObject">
            <summary>
            An object that implements IDispatch
            
            This currently has the following issues:
            1. If we prefer ComObjectWithTypeInfo over IDispatchComObject, then we will often not
               IDispatchComObject since implementations of IDispatch often rely on a registered type library. 
               If we prefer IDispatchComObject over ComObjectWithTypeInfo, users get a non-ideal experience.
            2. IDispatch cannot distinguish between properties and methods with 0 arguments (and non-0 
               default arguments?). So obj.foo() is ambiguous as it could mean invoking method foo, 
               or it could mean invoking the function pointer returned by property foo.
               We are attempting to find whether we need to call a method or a property by examining
               the ITypeInfo associated with the IDispatch. ITypeInfo tell's use what parameters the method
               expects, is it a method or a property, what is the default property of the object, how to 
               create an enumerator for collections etc.
            3. IronPython processes the signature and converts ref arguments into return values. 
               However, since the signature of a DispMethod is not available beforehand, this conversion 
               is not possible. There could be other signature conversions that may be affected. How does 
               VB6 deal with ref arguments and IDispatch?
               
            We also support events for IDispatch objects:
            Background:
            COM objects support events through a mechanism known as Connect Points.
            Connection Points are separate objects created off the actual COM 
            object (this is to prevent circular references between event sink
            and event source). When clients want to sink events generated  by 
            COM object they would implement callback interfaces (aka source 
            interfaces) and hand it over (advise) to the Connection Point. 
            
            Implementation details:
            When IDispatchComObject.TryGetMember request is received we first check
            whether the requested member is a property or a method. If this check
            fails we will try to determine whether an event is requested. To do 
            so we will do the following set of steps:
            1. Verify the COM object implements IConnectionPointContainer
            2. Attempt to find COM object's coclass's description
               a. Query the object for IProvideClassInfo interface. Go to 3, if found
               b. From object's IDispatch retrieve primary interface description
               c. Scan coclasses declared in object's type library.
               d. Find coclass implementing this particular primary interface 
            3. Scan coclass for all its source interfaces.
            4. Check whether to any of the methods on the source interfaces matches 
            the request name
            
            Once we determine that TryGetMember requests an event we will return
            an instance of BoundDispEvent class. This class has InPlaceAdd and
            InPlaceSubtract operators defined. Calling InPlaceAdd operator will:
            1. An instance of ComEventSinksContainer class is created (unless 
            RCW already had one). This instance is hanged off the RCW in attempt
            to bind the lifetime of event sinks to the lifetime of the RCW itself,
            meaning event sink will be collected once the RCW is collected (this
            is the same way event sinks lifetime is controlled by PIAs).
            Notice: ComEventSinksContainer contains a Finalizer which will go and
            unadvise all event sinks.
            Notice: ComEventSinksContainer is a list of ComEventSink objects. 
            2. Unless we have already created a ComEventSink for the required 
            source interface, we will create and advise a new ComEventSink. Each
            ComEventSink implements a single source interface that COM object 
            supports. 
            3. ComEventSink contains a map between method DISPIDs to  the 
            multicast delegate that will be invoked when the event is raised.
            4. ComEventSink implements IReflect interface which is exposed as
            custom IDispatch to COM consumers. This allows us to intercept calls
            to IDispatch.Invoke and apply custom logic - in particular we will
            just find and invoke the multicast delegate corresponding to the invoked
            dispid.
             </summary>
        </member>
        <member name="T:Microsoft.Scripting.NullArgBuilder">
            <summary>
            ArgBuilder which always produces null.  
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.SplatCallSite.MakeSplatCaller">
            <summary>
            creates a lambda that represent dynamic operation bound by SplatInvokeBinder
              (target, args) => SplatInvoke(target, args) 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Scripting.VarEnumSelector">
            <summary>
            If a managed user type (as opposed to a primitive type or a COM object) is passed as an argument to a COM call, we need
            to determine the VarEnum type we will marshal it as. We have the following options:
            1.	Raise an exception. Languages with their own version of primitive types would not be able to call
                COM methods using the language's types (for eg. strings in IronRuby are not System.String). An explicit
                cast would be needed.
            2.	We could marshal it as VT_DISPATCH. Then COM code will be able to access all the APIs in a late-bound manner,
                but old COM components will probably malfunction if they expect a primitive type.
            3.	We could guess which primitive type is the closest match. This will make COM components be as easily 
                accessible as .NET methods.
            4.	We could use the type library to check what the expected type is. However, the type library may not be available.
            
            VarEnumSelector implements option # 3
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.VarEnumSelector.GetManagedMarshalType(System.Runtime.InteropServices.VarEnum)">
            <summary>
            Gets the managed type that an object needs to be coverted to in order for it to be able
            to be represented as a Variant.
            
            In general, there is a many-to-many mapping between Type and VarEnum. However, this method
            returns a simple mapping that is needed for the current implementation. The reason for the 
            many-to-many relation is:
            1. Int32 maps to VT_I4 as well as VT_ERROR, and Decimal maps to VT_DECIMAL and VT_CY. However,
               this changes if you throw the wrapper types into the mix.
            2. There is no Type to represent COM types. __ComObject is a private type, and Object is too
               general.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.VarEnumSelector.CreateComPrimitiveTypeFamilies">
            <summary>
            Creates a family of COM types such that within each family, there is a completely non-lossy
            conversion from a type to an earlier type in the family.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.VarEnumSelector.GetConversionsToComPrimitiveTypeFamilies(System.Type)">
            <summary>
            Get the (one representative type for each) primitive type families that the argument can be converted to
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.VarEnumSelector.CheckForAmbiguousMatch(System.Type,System.Collections.Generic.List{System.Runtime.InteropServices.VarEnum})">
            <summary>
            If there is more than one type family that the argument can be converted to, we will throw a
            AmbiguousMatchException instead of randomly picking a winner.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.VarEnumSelector.TryGetPrimitiveComTypeViaConversion(System.Type,System.Runtime.InteropServices.VarEnum@)">
            <summary>
            Is there a unique primitive type that has the best conversion for the argument
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.VarEnumSelector.GetVariantBuilder(System.Type)">
            <summary>
            Get the COM Variant type that argument should be marshaled as for a call to COM
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Variant">
            <summary>
            Variant is the basic COM type for late-binding. It can contain any other COM data type.
            This type definition precisely matches the unmanaged data layout so that the struct can be passed
            to and from COM calls.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Variant.IsPrimitiveType(System.Runtime.InteropServices.VarEnum)">
            <summary>
            Primitive types are the basic COM types. It includes valuetypes like ints, but also reference types
            like BStrs. It does not include composite types like arrays and user-defined COM types (IUnknown/IDispatch).
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Variant.ToObject">
            <summary>
            Get the managed object representing the Variant.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Scripting.Variant.Clear">
            <summary>
            Release any unmanaged memory associated with the Variant
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Scripting.VariantBuilder">
            <summary>
            VariantBuilder handles packaging of arguments into a Variant for a call to IDispatch.Invoke
            </summary>
        </member>
    </members>
</doc>
